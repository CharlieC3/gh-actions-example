# CHANGE THIS -- This is the name of the workflow and should reflect the name of the repo or Docker image being built
name: gh-actions-example

# Run on pushes and PRs to any branch
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/CHANGELOG.md'
      - '**/package.json'
  pull_request:
  workflow_dispatch:

jobs:
  notify-start:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      slack_message_id: ${{ steps.slack.outputs.message_id }}
    steps:
      # Notifies a Slack channel about this job starting
      # Only runs if the previous action was successful
      - name: Notify slack start
        if: success()
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          channel: devops-notify
          status: STARTING
          color: warning
  build-publish:
    runs-on: ubuntu-latest
    steps:
      # Checkouts the branch/commit pertaining to the triggered job
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}

      # Detects the branch being built. If master, will:
      #   * Tag and release a new semantic version
      #   * Generate release notes and post them in CHANGELOG.md and Slack
      #   * If building a Node project, publish your module
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.0
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.workflow }}
        with:
          # These plugins aren't packaged with semantic-release by default. So specify them here to ensure they get installed during this GH Action
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            semantic-release-slack-bot
            @semantic-release/exec

      # Builds the Docker image, tags it with the new semantic version created from the previous action, and publishes it to a registry
      - name: Build/Tag/Push Image
        uses: docker/build-push-action@v1
        with:
          repository: blockstack/${{ github.workflow }}
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
          tags: ${{ steps.semantic.outputs.new_release_version }}
          tag_with_ref: true
          add_git_labels: true
          # Only push if there's a new release on main branch, or if building a non-main branch
          push: ${{ github.ref != 'refs/heads/master' || steps.semantic.outputs.new_release_version != '' }}

  notify-end:
    runs-on: ubuntu-latest
    needs:
      - notify-start
      - build-publish
    if: always() && github.event.pull_request.head.repo.full_name == github.repository
    steps:
      # Updates the first Slack message into a SUCCESSful message
      # Only runs if the previous actions were successful
      - name: Notify slack success
        if: needs.notify-start.result != 'failure' && needs.build-publish.result != 'failure'
        id: notify-success
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ needs.notify-start.outputs.slack_message_id }}
          channel: devops-notify
          status: SUCCESS
          color: good

      # Updates the first Slack message into a FAILURE message
      # Only runs if any of the previous actions failed
      - name: Notify slack fail
        if: steps.notify-success.outcome != 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1.1.2
        with:
          message_id: ${{ needs.notify-start.outputs.slack_message_id }}
          channel: devops-notify
          status: FAILED
          color: danger
